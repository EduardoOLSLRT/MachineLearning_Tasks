

import numpy as np
from sklearn.neighbors import KNeighborsClassifier

#=====================================================================
#=====================================================================
print("--- Exerc√≠cio 1 -  Miss√£o 2 (Aprendizado Supervisionado) ---")
#=====================================================================
#=====================================================================

# Dados: [nota_prova_1, nota_trabalho_2]
# R√≥tulos: 0 = Reprovou, 1 = Passou
# Cloque notas no seu DataSet
X_treino = np.array([
    [8, 7], [9, 8], [7, 9], [8, 8], # Passou
    [3, 4], [2, 3], [4, 2], [3, 3]  # Reprovou
])
y_treino = np.array([1, 1, 1, 1, 0, 0, 0, 0])

# Criando o modelo. O KNN decide o r√≥tulo de um novo ponto olhando para seus vizinhos mais pr√≥ximos.
# n_neighbors=3 significa que ele vai consultar os 3 vizinhos mais pr√≥ximos.
modelo_knn = KNeighborsClassifier(n_neighbors=3)

# O '.fit()' √© on√∫cleo do aprendizado: o modelo analisa os dados e ajusta seus par√¢metros.
modelo_knn.fit(X_treino, y_treino)

# testar com novos alunos.
aluno_A = np.array([[7, 6]]) # Esperamos que passe (1)
aluno_B = np.array([[5, 5]]) # Esperamos que reprove (0)

# O '.predict()' usa o conhecimento adquirido para fazer uma previs√£o.
previsao_A = modelo_knn.predict(aluno_A)
previsao_B = modelo_knn.predict(aluno_B)

print(f"Dados de treino (Notas): \n{X_treino}")
print(f"R√≥tulos de treino (Situa√ß√£o): {y_treino}")
print("-" * 20)
print(f"Previs√£o para o Aluno A: {'Passou' if previsao_A[0] == 1 else 'Reprovou'}")
print(f"Previs√£o para o Aluno B: {'Passou' if previsao_B[0] == 1 else 'Reprovou'}")
print("-" * 50, "\n")


from sklearn.linear_model import LinearRegression

#=====================================================================
#=====================================================================
print("--- Exerc√≠cio 2 -  Miss√£o 2 (Aprendizado Supervisionado) ---")
#=====================================================================
#=====================================================================

# Dados: [√°rea_m2, numero_quartos]
# R√≥tulos: preco_em_milhares_de_reais
X_imoveis = np.array([
    [60, 2], [75, 3], [80, 3], # Im√≥veis menores
    [120, 3], [150, 4], [200, 4] # Im√≥veis maiores
])
y_precos = np.array([100, 150, 200, 250, 280, 320])

# TODO: Crie uma inst√¢ncia do modelo LinearRegression.
modelo_regressao = LinearRegression()

# TODO: Treine o modelo com os dados de im√≥veis (X_imoveis, y_precos).
modelo_regressao.fit(X_imoveis, y_precos)

# TODO: Crie um novo im√≥vel para testar (ex: 100m¬≤, 3 quartos).
imovel_teste = np.array([[100, 3]])

# TODO: Fa√ßa a previs√£o do pre√ßo para o novo im√≥vel.
preco_previsto = modelo_regressao.predict(imovel_teste)

print(f"Previs√£o de pre√ßo para um im√≥vel de 100m¬≤ com 3 quartos: R$ {preco_previsto[0]:.2f} mil")
print("-" * 50, "\n")

#=====================================================================
#=====================================================================
print("--- Exerc√≠cio 3 -  Miss√£o 2 (Aprendizado Supervisionado) ---\n")
#=====================================================================
#=====================================================================

from sklearn.cluster import KMeans

# Dados: [valor_gasto_medio, frequencia_visitas_mensal]
# N√£o temos r√≥tulos!
clientes = np.array([
    [30, 1], [45, 2], [35, 1], # Grupo de baixo valor/frequ√™ncia
    [500, 8], [600, 10], [550, 9] # Grupo de alto valor/frequ√™ncia
])

# Criamos o modelo KMeans e pedimos para ele encontrar 2 clusters. Parametrize da forma que seja melhor (ver outros exemplos)
kmeans = KMeans(n_clusters=2, random_state=42, n_init=10)

# '.fit_predict()' treina o modelo e j√° retorna o cluster de cada cliente.
clusters_encontrados = kmeans.fit_predict(clientes)

print(f"Dados dos clientes (sem r√≥tulos):\n{clientes}")
print(f"Clusters encontrados pelo KMeans para cada cliente: {clusters_encontrados}")
print("Observe como o algoritmo separou corretamente os clientes nos grupos 0 e 1.")
print("-" * 50, "\n")


#=====================================================================
#=====================================================================
print("--- Exerc√≠cio 4 -  Miss√£o 2 (Aprendizado N√£o Supervisionado) ---")
#=====================================================================
#=====================================================================

from sklearn.linear_model import LinearRegression

# Dados: [valor_transacao, hora_do_dia (0-23)]
transacoes = np.array([
    [15.50, 14], [30.00, 10], [12.75, 11],
    [50.20, 19], [25.00, 9],
    [2500.00, 3] # Uma transa√ß√£o muito alta e de madrugada -> suspeita
])

# TODO: Crie um modelo KMeans para encontrar 2 grupos.
# A ideia √© que as transa√ß√µes normais fiquem em um grupo e a an√¥mala fique sozinha no outro.
modelo_anomalia = KMeans(n_clusters=2, random_state=42, n_init=10)

# TODO: Treine e preveja os clusters para os dados de transa√ß√µes.
clusters_transacoes = modelo_anomalia.fit_predict(transacoes)

print(f"Clusters para as transa√ß√µes: {clusters_transacoes}")
print("A transa√ß√£o an√¥mala √© aquela que est√° em um cluster isolado!\n")

#==============================================================================
#==============================================================================
# EXERCICIO FINAL DA MISS√ÉO 2 - APRENDIZADO POR REFOR√áO
# 
# Imagine que voc√™ est√° ensinando um Doguinho a buscar um petisco. Voc√™ n√£o escreve um manual de instru√ß√µes para ele. Em vez disso, o processo √© interativo:
# 
# 1 - O cachorro (o Agente) est√° em um ambiente (a sala). Ele decide fazer uma A√ß√£o (andar para frente).
# 2 - Voc√™ d√° um Feedback (a Recompensa). Se ele chegou mais perto do petisco, voc√™ diz "Bom garoto!" (recompensa positiva).
# 3 - Se ele foi para longe, voc√™ n√£o diz nada (recompensa neutra ou negativa, como o custo de energia).
# 4 - O cachorro recebe esse feedback e atualiza o seu "entendimento" sobre qual a√ß√£o √© boa naquela situa√ß√£o.
# 5 - Ele repete esse ciclo de A√ß√£o -> Recompensa v√°rias vezes. Depois de muitas tentativas e erros, o cachorro aprende a sequ√™ncia de a√ß√µes ideal para conseguir o petisco da forma mais r√°pida poss√≠vel.
# 
# O Aprendizado por Refor√ßo √© exatamente isso: um m√©todo de Machine Learning onde um agente aprende a tomar decis√µes em um ambiente para maximizar uma recompensa total ao longo do tempo.
# 
# Exerc√≠cio: Agente Comil√£o
# Cen√°rio: Nosso agente est√° em uma linha com 5 posi√ß√µes (0, 1, 2, 3, 4).
# O Agente: Um programa que s√≥ pode se mover para a 'direita'.
# O Ambiente: O caminho de 5 posi√ß√µes.
# O Objetivo: Chegar na Comida, que est√° na posi√ß√£o 4.
# 
# Regras de Recompensa:
# +20 pontos: Se o agente chegar na Comida.
# -1 ponto: Para cada passo que o agente der (representa o custo de energia).
# 
# Sua Miss√£o: Voc√™ vai preencher a l√≥gica do ambiente. O agente sempre tentar√° se mover para a 'direita'. Voc√™ precisa atualizar a posi√ß√£o dele, verificar se ele alcan√ßou a comida e calcular a recompensa a cada passo.
#==============================================================================
#==============================================================================

print("\n--- Exerc√≠cio 5 - Aprendizado por Refor√ßo (Agente Comil√£o) ---\n")

class AmbienteComida:
    def __init__(self):
        self.posicao_comida = 4  # Comida est√° na posi√ß√£o 4
        self.posicao_agente = 0  # Agente come√ßa na posi√ß√£o 0
        self.passos = 0
        self.recompensa_total = 0
    
    def reset(self):
        """Reseta o ambiente para o estado inicial"""
        self.posicao_agente = 0
        self.passos = 0
        self.recompensa_total = 0
        return self.posicao_agente
    
    def step(self, acao):
        """Executa uma a√ß√£o e retorna (nova_posicao, recompensa, terminou)"""
        # O agente s√≥ pode se mover para a direita (a√ß√£o = 1)
        if acao == 1 and self.posicao_agente < 4:
            self.posicao_agente += 1
            self.passos += 1
        
        # Calcula a recompensa
        recompensa = -1  # Custo de energia por passo
        
        # Verifica se chegou na comida
        terminou = False
        if self.posicao_agente == self.posicao_comida:
            recompensa = 20  # Recompensa por chegar na comida
            terminou = True
        
        self.recompensa_total += recompensa
        
        return self.posicao_agente, recompensa, terminou
    
    def render(self):
        """Mostra o estado atual do ambiente"""
        linha = ['_'] * 5
        linha[self.posicao_agente] = 'üêï'  # Agente
        linha[self.posicao_comida] = 'üçñ'   # Comida
        print(f"Ambiente: {' '.join(linha)} | Posi√ß√£o: {self.posicao_agente} | Passos: {self.passos}")

# Criando o ambiente
ambiente = AmbienteComida()

print("Simulando o Agente Comil√£o...")
print("üêï = Agente, üçñ = Comida, _ = Posi√ß√£o vazia\n")

# Simula√ß√£o de uma tentativa
print("=== Tentativa 1 ===")
ambiente.reset()
ambiente.render()

for passo in range(10):  # M√°ximo de 10 passos
    posicao, recompensa, terminou = ambiente.step(1)  # Sempre move para direita
    ambiente.render()
    
    if terminou:
        print(f"üéâ Agente chegou na comida! Recompensa total: {ambiente.recompensa_total}")
        break
    elif passo == 9:
        print(f"‚ùå Agente n√£o conseguiu chegar na comida em 10 passos")

print(f"\nRecompensa total: {ambiente.recompensa_total}")
print(f"Passos dados: {ambiente.passos}")
print("-" * 50)
